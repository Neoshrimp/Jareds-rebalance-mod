using Character_rebalance;
using GameDataEditor;
using I2.Loc;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;


class Extended_Helia_Flame_Arrow : Skill_Extended
{

	// bug. there's a slight bug where overload generated by flame arrow doesn't count when this method is called. Therefore, targeting Helia's own skill results in extra hit
	// applies to solar storm as well
	public override void SkillUseSingleAfter(Skill SkillD, List<BattleChar> Targets)
	{
		if (!this.MySkill.PlusHit)
		{
			base.SkillUseSingleAfter(SkillD, Targets);
			target = Targets[0];
			revealedList = new List<Skill>();
			for (int i = 0; i < 2; i++)
			{
				if (BattleSystem.instance.AllyTeam.Skills_Deck.Count <= i)
				{
					break;
				}
				revealedList.Add(BattleSystem.instance.AllyTeam.Skills_Deck[i]);
			}

			BattleSystem.DelayInput(BattleSystem.I_OtherSkillSelect(revealedList, new SkillButton.SkillClickDel(this.Del), ScriptLocalization.System_SkillSelect.Next1SKillView, false, true, true, false, true));
		}
	}

	private void Del(SkillButton Myskill)
	{
		int totalCost = 0;
		foreach (var s in revealedList)
		{
			int cost = s.AP;
			if (!s.NotCount)
			{
				cost -= s.Master.Overload;
			}
			totalCost += Math.Max(cost, 0);
		}

		Debug.Log(totalCost);

		for (int i = 0; i < totalCost; i++)
		{
			BattleSystem.DelayInputAfter(this.Ienum());
		}
	}

	public IEnumerator Ienum()
	{
		Skill Tempskill = Skill.TempSkill(GDEItemKeys.Skill_S_TW_Red_0, this.BChar, this.BChar.MyTeam);
		Skill_Extended Temp = new Skill_Extended();
		Temp.PlusSkillPerStat.Damage = -(int)Misc.PerToNum((float)Tempskill.MySkill.Effect_Target.DMG_Per, 50f);
		Tempskill.ExtendedAdd(Temp);

/*		foreach (var se in MySkill.AllExtendeds)
		{
			if(se.GetType().Name != this.GetType().Name)
				Tempskill.ExtendedAdd(se);
		}*/

        Tempskill.isExcept = true;
		Tempskill.FreeUse = true;
		Tempskill.PlusHit = true;
		if (this.target.IsDead)
		{
			this.BChar.ParticleOut(this.MySkill, Tempskill, this.BChar.BattleInfo.EnemyList.Random<BattleEnemy>());
		}
		else
		{
			this.BChar.ParticleOut(this.MySkill, Tempskill, this.target);
		}
		yield return new WaitForSecondsRealtime(0.2f);
		yield break;
	}


	List<Skill> revealedList = new List<Skill>();
	BattleChar target;
}

